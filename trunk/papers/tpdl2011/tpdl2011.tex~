\documentclass{llncs}

%\usepackage{llncsdoc}

%\usepackage{makeidx}  % allows for indexgeneration
\usepackage{graphicx}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}

\usepackage{paralist}


%%%Math
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}

\usepackage{algorithm}
\usepackage{algorithmic}

\usepackage{longtable}

\usepackage{listings}

\usepackage{color}

\definecolor{darkred}{rgb}{0.5, 0, 0}
\definecolor{violet}{rgb}{1, 0, 1}
\definecolor{green}{rgb}{0.3, 0.95, 0.3}
\definecolor{listinggray}{gray}{0.97}

\lstset{
	basewidth=0.45em,
	backgroundcolor=\color{listinggray},
	basicstyle=\footnotesize\ttfamily,
	breaklines=true,
	keywordstyle=\bfseries,
	stringstyle=\itshape,
	commentstyle=\itshape,
	showspaces=false,
	showtabs=false,
	showstringspaces=false,
	frame=trbl,
	frameround=tttt,
	extendedchars=true,
	numbers=none,
	aboveskip=0.5cm,
	belowskip=0.5cm,
	xleftmargin=0cm,
	xrightmargin=0cm
}


\begin{document}

\title{ONTOSPREAD: Activation of Concepts in Ontologies through the Spreading
Activation algorithm}

\titlerunning{ONTOSPREAD: Activation of concepts in ontologies through the
Spreading Activation algorithm}

\author{Jose Mar\'{i}a \'{A}lvarez\inst{2} \and Diego Berrueta\inst{1} \and Luis Polo
Paredes\inst{1} \and Jos\'{e} Emilio Labra Gayo\inst{2}} 


\authorrunning{Jose Mar\'{i}a Alvarez et al.}


\tocauthor{Jose Mar\'{i}a \'{A}lvarez, Diego Berrueta, Luis Polo Paredes, Jos\'{e} Emilio
Labra Gayo} 


\institute{Fundación CTIC, Gij\'{o}n, Asturias, Spain,\\
\email{\{diego.berrueta,luis.polo\}@fundacionctic.org},\\ 
 WWW home page: \texttt{http://www.fundacionctic.org}
\and
WESO RG, Universidad de Oviedo, Oviedo, Asturias, Spain,\\
\email{\{josem.alvarez,jelabra\}@weso.es},\\ 
 WWW home page: \texttt{http://www.weso.es}
}

\maketitle

\begin{abstract}
The present article introduces the ONTOSPREAD API for the development,
configuration, customization and execution of the Spreading Activation
techniques in the field of the Semantic Web. These techniques have been used to
the efficient exploration of knowledge bases based on semantic networks in
Information or Document Retrieval areas. ONTOSPREAD enables the implementation
of the Spreading Activation algorithm on RDF models and datasets, implicit graph structures. It
implements the process of activation and spread of concepts in ontologies
applying different restrictions like weight degradation according to the
distance or the converging paths reward. The main application of Spreading Activation
lies in two different areas: 1) construction of hybrid semantic search engines 2) ranking of
resources according to an input set of weighted resources. Finally an evaluation
methodology and an example using the Galen ontology are provided 
to validate the goodness and the capabilities of the proposed approach.
\end{abstract}

\section{Introduction}

%Digital Libraries: description and needs

The improvements in digitization lead us to a new environment in which digital libraries and archives are designed and used
in a new way. This situation implies new challenges in the digital formats, storage (information is continuously growing) and
information retrieval models. Following the recommendations of the European Commision~\footnote{Commission Communication ``i2010: digital libraries``} the digital libraries are
a key factor to bring out the full economic and cultural potential of Europe’s cultural and scientific heritage 
through the Internet. The online presence of material from different cultures and in different languages will
make it easier for citizens to appreciate their own cultural heritage as well as the heritage
of other European countries. Besides its fundamental cultural value, cultural material is an important resource for new
added value services. That is whay more sophisticated software tools and methods are needed to meet the expectations of users easing
the information retrieval of these large datasets and overcoming the classical problems of information overloading. 

Initiatives like Semantic Web and Linked Data tries to define vocabularies and ontologies enabling
the data interoperability and sharing that enable by means of the Web infrastructure the access
to the contents across different platforms and applications. The development of tools using these common
data formats and models is largely implemented but some algorithms and methods are not yet promoted to these
initiatives in a standard way previnting the improvement and effectiveness of information access. 

In this sense Spreading Activation (hereafter SA) techniques introduced by~\cite{Collins_Loftus_1975}, in the field of 
psycho linguistics and semantic priming, proposing a model in which all relevant information is mapped
on a graph as nodes with a certain ''activation value``. Relations between two concepts
are represented by a weighted edge. If a node is activated their activation value is spread
to their neighbour nodes. These techniques were adopted by the computer science community and applied
to the resolution of different problems, see Sect.~\ref{related-work}. In the field of digital libraries
these techniques can ease the information access providing a connectionist method to retrieve data like
brain does. Although SA techniques are widely used, more specifically in recent years have been successfully applied 
to ontologies, a common and standard API is missing and each third party interested in their application
 must to implement its own version of SA techniques.


The paper is structured as follows: FIXME

\subsection{Main Contributions}

In this paper the authors propose an standard and configurable API for SA techniques
\section{Background}
In this section, the theoretical model of \textit{SA} is reviewed to illustrate the basic components and
the operations performed by the SA techniques during their execution. This model is made up of 
a conceptual network of nodes connected through relations (conceptual graph). 
Taking into account that nodes represent domain objects or classes and edges relations among them, 
it is possible to stablish a semantic network in which SA can be applied. 
The processing performed by the algorithm is based on a thorough method to go down the graph using an iterative model. 
Each iteration is comprised of a set of beats, a stepwise method, and the checking of a stop
condition. Following~\cite{SpreadingActivationIR} the basic definitions made are presented:

\begin{figure}[h]
 \centering
    \includegraphics[width=3cm]{images/spreading}
    \caption{Graphical model of \textit{Spreading Activation}}
 \label{fig:spreading}
\end{figure}

\begin{description}
\item [\textit{Preadjustement}:] This is the initial and optional stage. It is usually in charge
of performing some control strategy over the target semantic network.
\medskip

\item [\textit{Spreading}:] This is the spread stage of the algorithm. Concepts
are activated in activation waves. The spreading node activates its neighbour
nodes.
\medskip

The calculation of the activation rank $I_i$ of a node $n_i$ is defined as
follows:

\begin{equation}
I_i  = \sum_j{O_j \omega_{ji}}
\end{equation}
\medskip

$I_i$ is the total inputs of the node $n_i$, $O_j$
is the output of the node $n_j$ connected to $n_i$ and $\omega_{ji}$
is the weight of the relation between $n_j$ and $n_i$. 
If there is not relation between $n_j$ and $n_i$ then
$\omega_{ji} = 0$. 


The activation function $f$ is used to evaluate the ``weight'' of a node and
decide if the concept is active.


\begin{equation}
N_i=f(I_i)=\begin{cases} 0 & \text{if $I_i < \jmath_i$} \\ 1 &
\text{if $I_i > \jmath_i$}
\\ \end{cases}
\end{equation}


$N_i$ is $1$ if the node has been activated or 0 otherwise. 
$\jmath_i$, the threshold activation value for node $i$, depends on the application
and it can change from a node to others. The activation rank $I_i$ of a
node $n_i$ will change while algorithm iterates.

\begin{figure}[h]
 \centering
 \includegraphics[width=4cm]{images/modelo-sa}
    \caption{Activation of the concepts in \textit{Spreading Activation}}
 \label{fig:modelo-sa}
\end{figure}

\item [\textit{Postadjustment}:] This is the final and optional stage. As well as
\textit{Preadjustment} stage, it is used to perform some control strategy in the
set of activated concepts.

\end{description}

\section{Related Work}\label{related-work}
\section{ONTOSPREAD}
\subsection{Constrained Spreading Activation}
One of the main features of the SA techniques are their flexibility to fit to 
the resolution of different kind of problems. From the configuration point of view
some constraints presented in~\cite{Cohen1987} have been customized improving
the expected outcomes of the execution according to the domain problem. Following these
constraints are defined:

\begin{description}

\item [Distance:] nodes far from an activated node should be penalized due to
the number of needed steps to reach and activate them.

\item [Path:] the activation path is built by the activation process from a node
to other and this process can be guided according to the weights of relations (edges). 

\item [Multiple outputs (Fan-Out):] nodes ``highly connected'' can 
guide to a misleading situation in which activated and spread nodes are not representative, these nodes
should be skipped of penalized by the algorithm.


\item [Threshold activation:] a node $n_i$ will be spread $iif$ its activation
value, $I_i$, is greater than a threshold activation constant $\jmath$.

\end{description}

The abovementioned theoretical model in Sect.\ref{sa} is an excellent start point to design
an API for \textit{SA} but from the domain expert point of view some requirements are missing (FIXME: ref) to provide
a configurable set of techniques based on \textit{SA}. That is why a set of extensions are proposed to deal
with the specific features of ontologies and RDF graphs.

\begin{description}

\item[Context of activation $\mathbb{D}_{com}$:] concepts can be defined in different
domains or schemes. The double process of activation and spreading will only be carried out in the
context $\mathbb{D}_{com}$.


\begin{definition}
Let $\mathbb{D}_{com}$ an active domain, if a concept $c_i$ is activated o
spread then $c_{i} \in \mathbb{D}_{com}$.
\end{definition}

\item[Minimum activation value $N_{\min}$ :] concepts with an activation
value $N_k$ greater than $N_{\min}$ will only be spread. This constraint comes from
the theorical model of \textit{SA}.

\item[Maximum number of spread concepts $\mathbb{M}$ :] the process of
activation and spreading will be executed, at the most, until $\mathbb{M}$ concepts
had been spread.

\item[Minimum number of spread concepts $\mathbb{M_{\min}}$ :] the process of
activation and spreading will be executed, at least, $\mathbb{M_{\min}}$ concepts had
been spread.

\item[Time of activation $t$:] the process of activation and spreading
will be executed, at the most, during $t$ units of time.

\item[Output Degradation $O_j$:] one of the keypoints to improve and customize
the algorithm is to define a function $h$ that penalizes the output value $O_j$
of a concept $c_j$.

\begin{enumerate}

\item Generic customization: $h$ calculates the output of a concept $c_j$
according to its degradation level.

\begin{equation}
O_j = h(I_j)
\end{equation}

Basic case: if $h_0 = id$, the output value $O_j$ takes the level of the
activated concept $c_j$ as its value.

\begin{equation}
O_j = h_0(I_j) = I_j
\end{equation}


\item Customization using {\bf distance}: $h_1$ calculates the level activation
of the concept $c_j$  according to the distance from the initial concept $c_l
\in \Phi$\footnote{Set of initial concepts.} that has activated it. The
activation value have to decrease if the distance from $\Phi$ grows thus
the algorithm follows a path from $c_l$ to $c_j$: $I_l > I_j$.


The function $h_1$ penalizes the output of concepts (decreasing their rank)
far from the ``activation core'' and rewards closed concepts. Thus, let $d_j$,
where $d_j = min\{d_{lj}:\forall n_l \in \Phi\}$:


\begin{equation}
 O_j = h_1(I_j,d_j)= \frac{I_j} {d_j}
\end{equation}

\item Customization using {\bf beats}: the function $h_2$ calculates the
degradation of the concept using the number of iterations $k$:


\begin{equation}
 O_j = h_2(I_j,k) = (1+\frac{I_j}{k})\exp(-\frac{I_j}{k}).
\end{equation}

\end{enumerate}

\end{description}

\subsection{Design of Spreading Activation}\label{impl-sa}

The entry point to\textit{SA} techniques is the set of initial concepts
($Q_{sem}$) that will generate a new set of the most relevant concepts
($Q'_{sem}$). Ontologies based on the RDF graph model are a graph where each node $n_i$ represents a concept
$c_i$ and the edge $\omega_{ji}$ is the semantic relation between $c_j$ y $c_i$.
The final result of the algorithm is a set of sorted pairs $(n_i, I_i)$
that build $Q'_{sem}$, where $n_i\approx c_i$ and $I_i\approx w_i$ (the
relevance of the concept).

The implementation of \textit{SA}, see Algorithm.\ref{alg:as}, comprises of two sets of concepts that
store information about the state of the algorithm: 1)
$\mathbb{D}_{com}$ are all the concepts in the semantic network and 2)
$\Phi$\footnote{$\Phi$ $\equiv$ $Q_{sem}$.} is the set of initial activated concepts, $c_j^k$  is 
the spreading concept at the $k$-esima iteration (from which other concepts are activated).

\begin{description}

\item [Set $\mathcal{A}$:] queue of {\bf activated} concepts (candidates to be
spread).

\begin{align}
 \mathcal{A}^0 &=\Phi \\
 \mathcal{A}^k &=(\mathcal{A}^{k-1} \cup \{c_i: {\forall c_i /  \omega_{ji}^k
>0}\})-{ \{\mathcal{G}^k}\}
\end{align}

\item [Set $\mathcal{G}$:] set of spread concepts:

\begin{align}
 \mathcal{G}^0 &=\emptyset \\
 \mathcal{G}^k &= \mathcal{G}^{k-1} \cup \{c_j^k\}
\end{align}

The output of the algorithm is the new enriched query $\mathcal{G}^k = Q'_{sem}$
made up of the set of weighted concepts.

\end{description}

Finally, the calculus of the activation value of a concept $c_i$
at iteration $k$, indicated by $I^k_i$, is defined. At $0$ iteration the
activation value $c_i$ is calculated as follows:
\begin{equation}
I^0_i=\begin{cases}%
  1 & \text{si $c_i \in \Phi$} \\%
  0 & \text{si $c_i \notin \Phi$} \\%
 \end{cases}
\end{equation}

at $k$ iteration, the activation value of $c_i$ from element
$c_j^{k}$ that activates $c_i$ is calculated as follows:

\begin{equation}
I^k_i=\begin{cases}%
  I^{k-1}_i & \text{si } \omega_{ji}^k = 0 \\%
  I^{k-1}_i + \omega_{ji}^k I^{k-1}_j  & \text{si }  \omega_{ji}^k > 0  \\%
 \end{cases}
\end{equation}

\begin{algorithm}
\caption{\textit{Pseudocode of Spreading Activation}}
\label{alg:as}
\begin{algorithmic}
  \REQUIRE $\Phi \neq \emptyset$  
  \ENSURE $\mathcal{G} \neq \emptyset$
  \STATE $\mathcal{A} \leftarrow \Phi$
  \STATE $\mathcal{G} \leftarrow \emptyset$
  \WHILE{$\mathcal{A} \neq \emptyset$ AND $card(\mathcal{G}) <
\mathcal{G}_{\min}$ AND $N_k \ge N_{\min}$}
	\STATE $n_k \leftarrow  extract(\mathcal{A})$
	\STATE $\mathcal{G} \leftarrow \{n_k\} \cup \mathcal{G}$	  	
	  \FORALL{$n_i / w_{ki} > 0$}	  	
	  	\STATE $N_i \leftarrow N_i + w_{ki}N_k$	
		\STATE $\mathcal{A} \leftarrow (\{n_i\} \cup \mathcal{A}) -
\mathcal{G}$		
	    \ENDFOR
  \ENDWHILE
 \RETURN $\mathcal{G}$
\end{algorithmic}
\end{algorithm}\label{alg:as}

\subsection{Improving Spreading Activation}\label{improve:sa}
Some improvements in the calculus of the activation value of a
concept have been introduced in order to get FIXME. If some paths of activation converge to the same node and the
source nodes are different then this node should be important and a reward is applied to the nodes presented
in these paths. 

\begin{definition}
Let $p_i$ the number of paths that start and finish in different nodes of
$\Phi$\footnote{The reward is not applied to nodes in  $\Phi$.} and they go
through the node $c_i$ and they only contain nodes belonging to $\mathcal{G}$.
This improvement assigns a new value to the activation value of each node $c_i$
indicated by $I^*_i$ and it is calculated by means of the function $g$:
\end{definition}

\begin{equation}
I^*_i = g(I_i,p_i)
\end{equation}

In this case, a relaxed reward function has been chosen, Eq. \ref{f:recompensa},
and, it is applied in the \textit{Postadjustment} stage, thus the
original semantics and behaviour of \textit{SA} algorithm is not broken. 

\begin{equation}\label{f:recompensa}
g(x,y) = x (\log(y+1)+1)
\end{equation}

$x$ is the reward constant, it can be defined according to the context and $y$
is the number of times that a concept $c_i$ must be rewarded.

\begin{figure}[h]
 \centering
    \includegraphics[width=6cm]{images/prize-sa}
    \caption{Paths and rewards in \textit{Spreading Activation}}
 \label{fig:prize-sa}
\end{figure}
  
  
\subsection{Refining Spreading Activation}
The whole configuration of the algorithm can be made by default but a customization
to a particular domain should be performed by a domain expert taking into account the
specific issues of this domain and considering it as a new stage of the ontology o graph modelling process.

\begin{enumerate}
  \item The algorithm is highly coupled to the target ontology and domain. 
   Thus the adjustment and customization of the algorithm should be created or
  supervised by experts with domain knowledge. 
  \item The establishment of relation weights among concepts is
  the key point to customize \textit{SA} techniques. 
\end{enumerate}

Since \textit{SA} uses weights in relations (or edges) to calculate the activation
value of the concepts, different ``patterns'', see Table
\ref{guidingspreading}, have been identified to manage the direction of the spreading process.

\begin{table}[htb]

    \begin{tabular}{|p{3cm}|p{6cm}|p{3cm}|}
     \hline
      \textbf{Spread Direction} & \textbf{Definition} & \textbf{Key Relation} \\
        
	\hline
  	 Ascending& It seeks for the activation of concepts more generic than
the current. & ``superclass''\\
	\hline
  	 Descending& It seeks for the activation of concepts more specific than
the current. & ``superclass''\\
	\hline
  	 Nominal& It seeks for the activation of instances instead of concepts. &
``instance of'' \\
	\hline
  	 Cross&  It seeks for the activation of concepts and instances connected
through a certain relation $\mathcal{R}$.  & $\mathcal{R}$ \\
     \hline

    \hline	
    \end{tabular}
    \caption{Patterns of direction control in \textit{SA}.}
\label{guidingspreading}
\end{table} 

These control patterns can be put together in order to fit as much as possible the focus
and direction of the double process of activation and spreading.

\subsection{Design and implementation of ONTOSPREAD API}
ONTOSPREAD API is addressed by an open design and 
the application of best practices on software design~\cite{Gamma,CoreJ2EEPatterns} and development~\cite{XP,Fowler1999}. 
The next basic objects need to implement \textit{SA} techniques have been identified.

\begin{itemize}

\item The \textit{Player} class handles the execution of the algorithm in a
      stepwise way. This is an application of the \textit{Iterator}
      design pattern to the activation and spreading processes. The state
      of the algorithm is captured in a separate class,
      \textit{OntoSpreadState} thus it is possible to serialize the
      state and back to a previous one.

\item The \textit{SA} process comprises of three sub-processes: \begin{inparaenum} 
    
 \item \textit{Preadjustement}: \textit{OntoSpreadPreAdjustment};
      \item \textit{Spreading} (activation and spreading) with constraints:
\textit{OntoSpreadRun}; and
      \item \textit{Postadjustment}:
\textit{OntoSpreadPostAdjustment}.\end{inparaenum}

Moreover, the process carries on the information about the knowledge base using the DAO
pattern thus the API is independent from the modelling language of the semantic network. Currently, OWL
and RDF are supported.
\end{itemize}


\begin{figure}[htb]
\centering
%	\includegraphics[width=8cm]{diagramas/general}
\caption{ONTOSPREAD Overview Diagram}
\label{fig:diagramas/general}
\end{figure}

\subsection{Designing the state of \textit{SA}}
The keypoint to design the algorithm lies in how and where
the information will be available at different iterations. Secondly, an unique entry point
to the state of the algorithm should be available trying to avoid
illegal accesses to the state. This object stores the next information: \begin{inparaenum}\item Spread
concepts. \item Active concepts. \item Paths of activation. \item Concept to be
spread. \item Generic swap area (to share information among iterations). \end{inparaenum}

\subsection{Designing the restrictions of \textit{SA}}
The extensibility and flexibility of the algorithm is subjected to a good design
of the restrictions and to the procedure of their evaluation. 
The next features and design patterns are used to design and implement the model of restrictions for SA:
\begin{itemize}
  \item Any restriction can be considered as a simple restriction and can be
evaluated to a boolean value.
  \item Conditions or actions in the algorithm can be comprised of several
restrictions.
  \item The extension points of the algorithm, included through a
\textit{Template Method} design pattern, are strategies to carry out an specific
action. Each strategy can be subjected to one or several restrictions.
\item Each restriction can be simple or comprised of others.
\textit{Composite} pattern.
  \item Each action is an strategy. \textit{Strategy} pattern.
  \item One strategy implies one restriction (or a set of them) thus the strategy
is a client of the \textit{Composite} of restrictions.
  \item The evaluation of the restrictions to get their value (boolean) is
carried out  through a \textit{Visitor} pattern that fits perfectly to evaluate and walk in
composite objects.
  \item The evaluation process consists on:
  \begin{inparaenum}
  \item Apply the strategy, this step modifies the execution and reporting
of batch tests. It provides a framework to configure, combine and load several
configurations for \textit{SA} and obtain results. We have designed a XML
vocabulary using XML-Schema and the \textit{Extensible Content Model} xml design
pattern to build the configuration of the \textit{SA} process. The designing of
this vocabulary is oriented to be used with JAXB, this technology allow us the
generation of Java classes automatically and we can marshalling and
unmarshalling objects providing a good way to configure, load and serialize
different configurations. The main goal to define a new XML vocabulary can be
arguable, but this vocabulary is not a new XML to be interchanged among
applications, we only use inside OntoSpreadTest and to provie state of the algorithm. 
  \item Validate the changes, the restricctions assert the
changes.\end{inparaenum}

\end{itemize}



%\begin{figure}[htb]
%\centering
%	\includegraphics[width=8cm]{diagramas/restricciones}
%\caption{Diagrama general de restricciones \textit{SA}}
%\label{fig:diagramas/restricciones}
%\end{figure}


% \subsection{OntoSpread development}
% 
% The development of the API has been carried out using Semantic Web tecnologies
% and web development tecnology as: Java programming language, 
% Jena\footnote{\url{http://jena.sf.net}} API, 
% JAXB\footnote{\url{
% http://java.sun.com/developer/technicalArticles/WebServices/jaxb/}}, 
% Maven\footnote{\url{http://maven.apache.org}} o
% Spring\footnote{\url{http://www.springframework.org/}}. We have built a
% graphical viewer and debugger,
% \textit{OntoSpread Inspector}, using the graph library
% JpowerGraph\footnote{\url{http://jpowergraph.sf.net}} and
% SWT\footnote{\url{http://www.eclipse.org/swt/}}.
% 
% \subsubsection{Source code metrics}
% 
% We have extracted, using Eclipse\footnote{\url{http://www.eclipse.org}} and the
% metrics plugin\footnote{\url{http://metrics.sf.net/}},  
% some source code metrics (only for OntoSpread API) to show and mesaure its
% quality. We present the most meaningful source code metrics, 
% see Table \ref{tabla:metricas-valores}, based on the definitions
% in~\cite{229953}. These metrics measures cohesion and coupling of the software and can be useful
% to decide if the code is well structured.
% 
%    \begin{longtable}{|p{1cm}|p{4cm}|p{1cm}|p{1cm}|p{1cm}|p{1cm}|p{1.5cm}|}
%         
%         \caption{Source Code Metrics} \label{tabla:metricas-valores}\\
%         \hline
%         \multicolumn{7}{|c|}{\textbf{Source Code Metrics}}\\
%         \hline
%         \textit{ID} &  \textit{Def.} &  \textit{Total} &  \textit{Avg.}& 
% \textit{Std. Dev.} & \textit{Max}& \textit{Scope} \\ \hline
%         \endfirsthead
%         \caption[]{Source Code Metrics (continue)}\\
%         \hline
%         \multicolumn{7}{|c|}{\textbf{Source Code Metrics}}\\
%         \hline
%         \textit{ID} & \textit{Def} & \textit{Total} &  \textit{Avg.}& 
% \textit{Std.
%         Dev.} & \textit{Max}& \textit{Scope} \\ \hline
%         \endhead
%         \hline
%         \multicolumn{7}{|c|}{Continue $\ldots$}\\
%         \hline
%         \endfoot
%         \hline
%         \endlastfoot
% 		TLOC&Total Lines of Code.&5272&&&& \\ \hline
%     		CA&Afferent Coupling.&&$6.524$&$10.545$&48&Package.\\ \hline
% 		RMD&Normalized Distance, $|RMA + RMI - 1 |$.&&$0.32$&$0.347$&1&Package. \\ \hline
% 		NOM&&$0.065$&$0.296$&3&Type. \\ \hline 
% 		RMI&Instability: $CE / (CA + CE)$&&$0.567$&$0.387$&1&Package. \\ \hline
% 		%NOF&Number of Atributtes.&147&$1.256$&$2.039$&12&Type. \\ \hline
% 		%NOP&Number of Packages.&42&&&& \\ \hline
% 		%MLOC&Method Lines of Code.&2661&$4.05$&$6.179$&88&Method. \\ \hline
% 		%WMC&Weighted methods per Class.&852&$7.282$&$6.859$&42&Type. \\ \hline
% 		%NORM&Number of Overriden Methods (no ``Object'' methods).&20&$0.171$&$0.419$&2&Type. \\ \hline
% 		%NSF&Number of Static Attributes.&58&$0.496$&$0.622$&$3$&Type. \\ \hline
% 		NBD&Nested Block Depth.&&$1.204$&$0.516$&4&Method. \\ \hline
% 		%NOM&Number of Methods.&594&$5.077$&$5.297$&33&Type.\\	\hline 
% 		LCOM&Lack of Cohesion of Methods (\textit{Henderson-Sellers}).&&$0.18$&$0.289$&$0.957$&Type.\\ \hline 
% 		VG&McCabe Cyclomatic Complexity.&&$1.297$&$0.735$&6&Method. \\ \hline
% 		RMA&Abstractness.&&$0.113$&$0.186$&0.667&Package. \\ \hline
% 		%NOI&Number of Interfaces.&11&$0.262$&$0.537$&2&Package. \\ \hline
% 		CE&Efferent Coupling.&&$1.976$&$1.282$&5&Package. \\ \hline
% 		%NC&11&$0.094$&$0.539$&5&N/A&Media y máximo por tipo. \\ \hline
% 		DIT&Depth of Inheritance Tree.&&$1.607$&$0.915$&4&Type. \\ \hline
%     	 \hline
%         \end{longtable}      
% 
% 
% All of these values are in the default range defined in the plugin thus we can
% assure the quality of the source code with the desired feautures of \textit{high
% cohesion} and \textit{low coupling}.
% 		
% 
% \subsection{OntoSpread tools}
% 
% The development of a new API requires a test bed to ensure: \begin{inparaenum} 
% \item the functional requirements of the API, we must check if the algorithm
% implements the \textit{SA} model. Black box tests. \item White Box tests, we
% have made 50 unit tests.
%                                                             \end{inparaenum} 
% However, these tests are programmer oriented and we want to provide tools that
% can be used to test the API with nontechnical people. Therefore, we have
% designed and implemented two different tools:
% \begin{description}
% 
%  \item [OntoSpreadTest.] it is a tool for the automatic execution and reporting
% of batch tests. It provides a framework to configure, combine and load several
% configurations for \textit{SA} and obtain results. We have designed a XML
% vocabulary using XML-Schema and the \textit{Extensible Content Model} xml design
% pattern to build the configuration of the \textit{SA} process. The designing of
% this vocabulary is oriented to be used with JAXB, this technology allow us the
% generation of Java classes automatically and we can marshalling and
% unmarshalling objects providing a good way to configure, load and serialize
% different configurations. The main goal to define a new XML vocabulary can be
% arguable, but this vocabulary is not a new XML to be interchanged among
% applications, we only use inside OntoSpreadTest and to provide an easy way to
% handle XML configurations in Java through JAXB. E.g. the XML vocabulary belong
% us configure restrictions as an iterative model, Fig. \ref{example-iterator}.
% Summarizing, OntoSpreadTest is an interpreter of our XML vocabuluary.
% 
% \begin{figure}
% \lstset{language=XML}
% \begin{lstlisting}
% <restriction xsi:type="activationRestriction">
%  <config>
%    <init>0.3</init>
%    <step>0.1</step>
%    <stop>1</stop>
%  </config>  
% </restriction>
% \end{lstlisting}
% \caption{Configuring a restriction.}
% \label{example-iterator}
% \end{figure}
% 
% \item[OntoSpread Inspector.] It is a graphical debugger,
%  of \textit{SA} algorithm. It follows the idea of an
%  inspector inside an ide and belongs: configure, load, run (one step or stepwise)
%  and view the evolution of the semantic network with the concepts (activated,
%  spread, weights, relations, etc.). The main goal of this tool is provide an
%  environment to debug, inspect and change the state of the algorithm.
% 
% \end{description}


\subsubsection{ONTOSPREAD supporting tools}
\subsection{Use Cases and Scenarios}
\section{Evaluation of ONTOSPREAD API}
\subsection{ONTOPSREAD API in Action}
\section{Conclussions}
\subsection{Future Work}

% \section{Introduction}
% 
% \textit{Spreading Activation} techniques (hereafter \textit{SA}) rise in the
% Psychology area, as result of human memory researches~\cite{AndersonTheory} and
% more specifically, in the search of ways to exploit human knowledge
% representation:
% \begin{inparaenum} \item Procedural semantics.
% \item Semantic features. \item Semantic Networks\footnote{From Psychology point of
% view.}.\end{inparaenum}
% 
% 
% In the Semantic Web domain and regarding the use of ontologies as knowledge
% bases, they could be taken as a kind of semantic network that models concepts and their relationships using
% a certain sort of logics, e.g. Description Logics (DLs). In some sense,
% ontologies capture a domain knowledge and express it as a logic structure, just
% as the human memory does.
% 
% Knowledge representation using a set of concepts related fits to real world.
% Concepts can express overall relations and data but also particular domain
% knowledge. That's why it is relevant provide an useful method to obtain sets of related
% concepts efficiently and automatically. Usually, the methods to explore knowledge bases can be split into: \begin{inparaenum} efficient search algorithms (based on \textit{Brand and Bounch}) in semantic networks or graphs. \item Neural networks~\cite{Chen95}\end{inparaenum}. \textit{SA}
% techniques provide us a method to explore semantic networks as an iterative way
% (performance oriented) and can be applicable to different problems:
% Information or Document retrieval. Our main goal is applied these techniques to
% ontologies, getting a new method to rank the concepts and their relations
% according to a query.
% 
% \subsection{Related work}
% The use of \textit{SA} as algorithm to explore graphs is not a new approach and
% since 80's\cite{Scott1981} appeared the first works naming it. The
% main use was focused in Document~\cite{Cui03,Kobayashi00,turtle91inference,2917612} and Information
% Retrieval~\cite{Agosti1993,Cohen1987,Baeza99} altough the appearance/born of Internet Spreading
% Activation has been used in retrieve resources from the network:
% hypertext~\cite{Agosti1993} or multimedia with a real trust measurement~\cite{ziegler-lausen-04}. On other hand, these techniques has been used in semantic search based on hybrid approaches~\cite{RochaSA04,XueHYZCM04}, user query expansion~\cite{767402} combining metadata and user information or improve web data annotations~\cite{GelgiVD05}.
% 
% \subsection{Main contribution}
% 
% The aim of this paper is to introduce the application and refining \textit{SA}
% tecniques in the activation of concepts defined in the ontologies and the
% algorithm design through a generic Java API, called OntoSpread that handles the
% process of activation and spread concepts. Furthermore, OntoSpread \footnote{\url{http://sf.net/projects/ontospread}} has
% been developed as an open source project hosts in Sourceforge under LGPL license
% to easy its use and future contributions.
% 
%
% \section{OntoSpread: the design of an API for Spreading Activation}
% 
% Our Spreading Activation API focuses on an open design, best
% practices~\cite{XP,Fowler1999} and makes extensive use of design
% patterns~\cite{Gamma,CoreJ2ee}. We have identified the next basic objects need
% to implement \textit{SA} techniques.
% 
% \begin{itemize}
% 
% \item The \textit{Player} class handles the execution of the algorithm in a
%       stepwise way. This is an application of the \textit{Iterator}
%       design pattern to the activation and spreading processes. The state
%       of the algorithm is captured in a separate class,
%       \textit{OntoSpreadState}, so it is possible to serialize the
%       status and to move backwards.
% 
% \item The \textit{SA} process comprises three sub-processes: \begin{inparaenum} 
%     
%  \item \textit{Preadjustement}: \textit{OntoSpreadPreAdjustment};
%       \item \textit{Spreading} (activation and spreading) with constraints:
% \textit{OntoSpreadRun}; and
%       \item \textit{Postadjustment}:
% \textit{OntoSpreadPostAdjustment}.\end{inparaenum}
% Moreover, the process has information about the knowledge base using a DAO
% pattern so the API is independent from the modelling language. Currently, OWL
% and RDF are supported. Although we have brought forward the use of another
% languages as SKOS-Core or WSML, providing the need operations to extract the
% information about concepts and their relations.
% \end{itemize}
% 
% 
% 
% %\begin{figure}[htb]
% %\centering
% %	\includegraphics[width=8cm]{diagramas/general}
% %\caption{Diagrama general}
% %\label{fig:diagramas/general}
% %\end{figure}
% 
% 
% \subsection{Designing of the state for \textit{SA}}
% 
% In the first one, the keypoint to design the algorithm falls in how and where
% the information will be available at different iterations. Secondly, we want to
% provide an only one access point to the state of the algorithm trying to avoid
% weak states and providing an easy way for supportting. 
% This object stores the next information: \begin{inparaenum}\item Spread
% concepts. \item Active concepts. \item Paths of activation. \item Concept to be
% spread. 
% \item Generic swap area (to share information). \end{inparaenum}
% 
% \subsection{Designing of restrictions for \textit{SA}}
% The extensibility and flexibility of the algorithm is subjected to a good design
% of the restrictions and the procedure of their evaluation. The next features and design patterns are used to guide the model of restrictions for SA:
% 
% \begin{itemize}
%   \item Any restriction can be considered as a simple restriction and can be
% evaluated to a boolean value.
%   \item Conditions or actions in the algorithm can be composed of several
% restrictions.
%   \item The extension points of  the algorithm, included through a
% \textit{Template Method} design pattern, are strategies to carry out an specific
% action. Each strategy can be subjected to one or several restrictions.
% \item Each restriction can be simple or composed by other ones.
% \textit{Composite} pattern.
%   \item Each action is an strategy. \textit{Strategy} pattern.
%   \item One strategy entails one restriction (or set of them) so the strategy
% seems a client of the \textit{Composite} of restrictions.
%   \item The evaluation of the restrictions to get their value (boolean) is
% carried out
%   through a \textit{Visitor} pattern that fits perfectly to do the evaluation of
% composite objects.
%   \item The evaluation process consists on:
%   \begin{inparaenum}
%   \item Apply the strategy, this step modifies thc execution and reporting
% of batch tests. It provides a framework to configure, combine and load several
% configurations for \textit{SA} and obtain results. We have designed a XML
% vocabulary using XML-Schema and the \textit{Extensible Content Model} xml design
% pattern to build the configuration of the \textit{SA} process. The designing of
% this vocabulary is oriented to be used with JAXB, this technology allow us the
% generation of Java classes automatically and we can marshalling and
% unmarshalling objects providing a good way to configure, load and serialize
% different configurations. The main goal to define a new XML vocabulary can be
% arguable, but this vocabulary is not a new XML to be interchanged among
% applications, we only use inside OntoSpreadTest and to provie state of the algorithm. 
%   \item Validate the changes, the restricctions assert the
% changes.\end{inparaenum}
% 
% \end{itemize}
% 
% 
% 
% %\begin{figure}[htb]
% %\centering
% %	\includegraphics[width=8cm]{diagramas/restricciones}
% %\caption{Diagrama general de restricciones \textit{SA}}
% %\label{fig:diagramas/restricciones}
% %\end{figure}
% 
% 
% \subsection{OntoSpread development}
% 
% The development of the API has been carried out using Semantic Web tecnologies
% and web development tecnology as: Java programming language, 
% Jena\footnote{\url{http://jena.sf.net}} API, 
% JAXB\footnote{\url{
% http://java.sun.com/developer/technicalArticles/WebServices/jaxb/}}, 
% Maven\footnote{\url{http://maven.apache.org}} o
% Spring\footnote{\url{http://www.springframework.org/}}. We have built a
% graphical viewer and debugger,
% \textit{OntoSpread Inspector}, using the graph library
% JpowerGraph\footnote{\url{http://jpowergraph.sf.net}} and
% SWT\footnote{\url{http://www.eclipse.org/swt/}}.
% 
% \subsubsection{Source code metrics}
% 
% We have extracted, using Eclipse\footnote{\url{http://www.eclipse.org}} and the
% metrics plugin\footnote{\url{http://metrics.sf.net/}},  
% some source code metrics (only for OntoSpread API) to show and mesaure its
% quality. We present the most meaningful source code metrics, 
% see Table \ref{tabla:metricas-valores}, based on the definitions
% in~\cite{229953}. These metrics measures cohesion and coupling of the software and can be useful
% to decide if the code is well structured.
% 
%    \begin{longtable}{|p{1cm}|p{4cm}|p{1cm}|p{1cm}|p{1cm}|p{1cm}|p{1.5cm}|}
%         
%         \caption{Source Code Metrics} \label{tabla:metricas-valores}\\
%         \hline
%         \multicolumn{7}{|c|}{\textbf{Source Code Metrics}}\\
%         \hline
%         \textit{ID} &  \textit{Def.} &  \textit{Total} &  \textit{Avg.}& 
% \textit{Std. Dev.} & \textit{Max}& \textit{Scope} \\ \hline
%         \endfirsthead
%         \caption[]{Source Code Metrics (continue)}\\
%         \hline
%         \multicolumn{7}{|c|}{\textbf{Source Code Metrics}}\\
%         \hline
%         \textit{ID} & \textit{Def} & \textit{Total} &  \textit{Avg.}& 
% \textit{Std.
%         Dev.} & \textit{Max}& \textit{Scope} \\ \hline
%         \endhead
%         \hline
%         \multicolumn{7}{|c|}{Continue $\ldots$}\\
%         \hline
%         \endfoot
%         \hline
%         \endlastfoot
% 		TLOC&Total Lines of Code.&5272&&&& \\ \hline
%     		CA&Afferent Coupling.&&$6.524$&$10.545$&48&Package.\\ \hline
% 		RMD&Normalized Distance, $|RMA + RMI - 1 |$.&&$0.32$&$0.347$&1&Package. \\ \hline
% 		NOM&&$0.065$&$0.296$&3&Type. \\ \hline 
% 		RMI&Instability: $CE / (CA + CE)$&&$0.567$&$0.387$&1&Package. \\ \hline
% 		%NOF&Number of Atributtes.&147&$1.256$&$2.039$&12&Type. \\ \hline
% 		%NOP&Number of Packages.&42&&&& \\ \hline
% 		%MLOC&Method Lines of Code.&2661&$4.05$&$6.179$&88&Method. \\ \hline
% 		%WMC&Weighted methods per Class.&852&$7.282$&$6.859$&42&Type. \\ \hline
% 		%NORM&Number of Overriden Methods (no ``Object'' methods).&20&$0.171$&$0.419$&2&Type. \\ \hline
% 		%NSF&Number of Static Attributes.&58&$0.496$&$0.622$&$3$&Type. \\ \hline
% 		NBD&Nested Block Depth.&&$1.204$&$0.516$&4&Method. \\ \hline
% 		%NOM&Number of Methods.&594&$5.077$&$5.297$&33&Type.\\	\hline 
% 		LCOM&Lack of Cohesion of Methods (\textit{Henderson-Sellers}).&&$0.18$&$0.289$&$0.957$&Type.\\ \hline 
% 		VG&McCabe Cyclomatic Complexity.&&$1.297$&$0.735$&6&Method. \\ \hline
% 		RMA&Abstractness.&&$0.113$&$0.186$&0.667&Package. \\ \hline
% 		%NOI&Number of Interfaces.&11&$0.262$&$0.537$&2&Package. \\ \hline
% 		CE&Efferent Coupling.&&$1.976$&$1.282$&5&Package. \\ \hline
% 		%NC&11&$0.094$&$0.539$&5&N/A&Media y máximo por tipo. \\ \hline
% 		DIT&Depth of Inheritance Tree.&&$1.607$&$0.915$&4&Type. \\ \hline
%     	 \hline
%         \end{longtable}      
% 
% 
% All of these values are in the default range defined in the plugin thus we can
% assure the quality of the source code with the desired feautures of \textit{high
% cohesion} and \textit{low coupling}.
% 		
% 
% \subsection{OntoSpread tools}
% 
% The development of a new API requires a test bed to ensure: \begin{inparaenum} 
% \item the functional requirements of the API, we must check if the algorithm
% implements the \textit{SA} model. Black box tests. \item White Box tests, we
% have made 50 unit tests.
%                                                             \end{inparaenum} 
% However, these tests are programmer oriented and we want to provide tools that
% can be used to test the API with nontechnical people. Therefore, we have
% designed and implemented two different tools:
% \begin{description}
% 
%  \item [OntoSpreadTest.] it is a tool for the automatic execution and reporting
% of batch tests. It provides a framework to configure, combine and load several
% configurations for \textit{SA} and obtain results. We have designed a XML
% vocabulary using XML-Schema and the \textit{Extensible Content Model} xml design
% pattern to build the configuration of the \textit{SA} process. The designing of
% this vocabulary is oriented to be used with JAXB, this technology allow us the
% generation of Java classes automatically and we can marshalling and
% unmarshalling objects providing a good way to configure, load and serialize
% different configurations. The main goal to define a new XML vocabulary can be
% arguable, but this vocabulary is not a new XML to be interchanged among
% applications, we only use inside OntoSpreadTest and to provide an easy way to
% handle XML configurations in Java through JAXB. E.g. the XML vocabulary belong
% us configure restrictions as an iterative model, Fig. \ref{example-iterator}.
% Summarizing, OntoSpreadTest is an interpreter of our XML vocabuluary.
% 
% \begin{figure}
% \lstset{language=XML}
% \begin{lstlisting}
% <restriction xsi:type="activationRestriction">
%  <config>
%    <init>0.3</init>
%    <step>0.1</step>
%    <stop>1</stop>
%  </config>  
% </restriction>
% \end{lstlisting}
% \caption{Configuring a restriction.}
% \label{example-iterator}
% \end{figure}
% 
% \item[OntoSpread Inspector.] It is a graphical debugger,
%  of \textit{SA} algorithm. It follows the idea of an
%  inspector inside an ide and belongs: configure, load, run (one step or stepwise)
%  and view the evolution of the semantic network with the concepts (activated,
%  spread, weights, relations, etc.). The main goal of this tool is provide an
%  environment to debug, inspect and change the state of the algorithm.
% 
% \end{description}
%  
% \subsection{Working with OntoSpread API}
% 
% \subsubsection{BOPA}\label{proyecto:bopa}
% OntoSpread API has been integrated in BOPA~\cite{bopaEstonia} project that is
% one of \textit{Semantic Web Use Cases and Case
% Studies}\footnote{\url{http://www.w3.org/2001/sw/sweo/public/UseCases/CTIC/}}
% collected by W3C.\textit{SA} techniques are used as part of an hybrid search
% process, see Fig~\ref{fig:sa-search}, they are in charge of the subprocess of
% query expansion taking as set of initial concepts the concepts retrieved from
% the user query.
%  \begin{figure}[h]
%  \centering
%     \includegraphics[width=10cm]{images/sa-search}
%     \caption{Applying \textit{Spreading Activation} in BOPA}
%  \label{fig:sa-search}
% \end{figure}
% 
% 
% \subsubsection{DBPedia}
% FIXME
%   
% 
% \section{Conclussions and future work}
% 
% \textit{SA} techniques are a combination of restrictions that provide us a
% method to build a set of ranked concepts from a conceptual network as well as a
% human memory does. The application of \textit{SA} is very suitable for a large
% number of scenarios and use cases providing a method to get ``artificial
% suggestions'' closed to human. If we would have to resume \textit{SA} techniques
% in one word, is \textit{flexibility}.
% 
% \begin{enumerate}
% \item Flexibility, extensibily and modularity.
% \item Several scenerarios and use cases to be applied.
% \item The adjusting and refining of the algorithm is a task for domain experts.
% \item It is similar to  a ``helper'' (domain expert).
% \end{enumerate}
% 
% The main goal to improve an algorithm so many flexible as \textit{SA} will be
% adjust and refine its 
% operation for the problem of activation and spread concetps in ontologies. The
% keypoints could be:
% \begin{itemize}
%  \item An automatic learning algorithm to build configurations for OntoSpread
% according to ontologies. Thus, the training of this algorithm could generates
% the best configuration for a specific domain. The algorithm could optimize all
% of the parameters in the algorithm: weights of the relations, activation
% function (parameter of degradation) or the combine of restrictions.
% \item Use of mesaures related to instances~\cite{RochaSA04} as `Cluster
% Measure'', ``Specifity Measure'' or both in the process of activation/spreading.
% \item Development of techniques to select\footnote{Currently, we use ``first
% better''.} the next concept to be spread based on metaheuristics or Tabu
% search~\cite{Glover1990,Gendreau}.
% \item Study and application of \textit{SA} as helper of semi automatic methods
% as mapping~\cite{Bruijin2006} between ontologies or tagging with folksonomies.
% \end{itemize}
% 
% 
%\nocite{*}

Formal\cite{Scott1981,Cohen1987}
Data mining\cite{paper:troussov:2008}
Information Retrieval\cite{SpreadingActivationIR,Helmut2004,Agosti1993,Grinberg:2011:ASA:1940632.1940674}
Concept exploration\cite{Qiu93} and ontologies\cite{Chen95,DBLP:journals/cogsr/KatiforiVD10,DBLP:journals/ijsc/DixKLVS10,liu_et_al_2005}
Annotations\cite{GelgiVD05,Chen:2007:PSA:1780653.1780702}
Tagging\cite{labraTagging2007}
Web Search\cite{XueHYZCM04}
Natural Language\cite{Tsatsaronis:2007:WSD:1625275.1625555}
Recommendations\cite{citeulike:3779904,gouws-vanrooyen-engelbrecht:2010:CCSR}
Semantic Search\cite{conf-sofsem-Suchal08,Wolverton94retrievingsemantically,Schumacher+2008search,bopaEstonia,RochaSA04,LabraWesoNet}
Ing. software\cite{CoreJ2EEPatterns}


\bibliographystyle{plain}
% %\bibliographystyle{unsrt}
% %\bibliographystyle{acm}
\bibliography{bib/references}
% \renewcommand{\bibname}{References}
\end{document}
